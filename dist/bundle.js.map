{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://understanding-ts/./src/components/base-component.ts","webpack://understanding-ts/./src/util/validation.ts","webpack://understanding-ts/./src/decorators/autobind.ts","webpack://understanding-ts/./src/models/project.ts","webpack://understanding-ts/./src/state/project-state.ts","webpack://understanding-ts/./src/components/project-input.ts","webpack://understanding-ts/./src/components/project-item.ts","webpack://understanding-ts/./src/components/project-list.ts","webpack://understanding-ts/./src/app.ts"],"sourcesContent":["// Component Class\nexport abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n  templateElement: HTMLTemplateElement;\n  hostElement: T;\n  element: U;\n\n  constructor(\n    templateId: string,\n    hostElementId: string,\n    insertAtStart: boolean,\n    newElementId?: string\n  ) {\n    this.templateElement = document.getElementById(\n      templateId\n    )! as HTMLTemplateElement;\n    this.hostElement = document.getElementById(hostElementId)! as T;\n\n    const importedNode = document.importNode(\n      this.templateElement.content,\n      true\n    );\n    this.element = importedNode.firstElementChild as U;\n    if (newElementId) {\n      this.element.id = newElementId;\n    }\n\n    this.attach(insertAtStart);\n  }\n\n  abstract configure(): void;\n  abstract renderContent(): void;\n\n  private attach(insertAtBeginning: boolean) {\n    this.hostElement.insertAdjacentElement(\n      insertAtBeginning ? \"afterbegin\" : \"beforeend\",\n      this.element\n    );\n  }\n}\n","// Validation\nexport interface Validatable {\n  value: string | number;\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n}\n\nexport function validate(validatableInput: Validatable) {\n  let isValid = true;\n  if (validatableInput.required) {\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n  }\n  if (\n    validatableInput.minLength != null &&\n    typeof validatableInput.value === \"string\"\n  ) {\n    isValid =\n      isValid && validatableInput.value.length >= validatableInput.minLength;\n  }\n  if (\n    validatableInput.maxLength != null &&\n    typeof validatableInput.value === \"string\"\n  ) {\n    isValid =\n      isValid && validatableInput.value.length <= validatableInput.maxLength;\n  }\n  if (\n    validatableInput.min != null &&\n    typeof validatableInput.value === \"number\"\n  ) {\n    isValid = isValid && validatableInput.value >= validatableInput.min;\n  }\n  if (\n    validatableInput.max != null &&\n    typeof validatableInput.value === \"number\"\n  ) {\n    isValid = isValid && validatableInput.value <= validatableInput.max;\n  }\n  return isValid;\n}\n","// autobind decorator\nexport function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  const adjDescriptor: PropertyDescriptor = {\n    configurable: true,\n    get() {\n      const boundFn = originalMethod.bind(this);\n      return boundFn;\n    },\n  };\n  return adjDescriptor;\n}\n","// Project Type\nexport enum ProjectStatus {\n  Active,\n  Finished,\n}\n\nexport class Project {\n  constructor(\n    public id: string,\n    public title: string,\n    public description: string,\n    public manday: number,\n    public status: ProjectStatus\n  ) {}\n}\n","import { Project, ProjectStatus } from \"../models/project\";\n\n// Project State Management\ntype Listener<T> = (items: T[]) => void;\n\nclass State<T> {\n  protected listeners: Listener<T>[] = [];\n\n  addListener(listenerFn: Listener<T>) {\n    this.listeners.push(listenerFn);\n  }\n}\n\nexport class ProjectState extends State<Project> {\n  private projects: Project[] = [];\n  private static instance: ProjectState;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance() {\n    if (this.instance) {\n      return this.instance;\n    }\n    this.instance = new ProjectState();\n    return this.instance;\n  }\n\n  addProject(title: string, description: string, manday: number) {\n    const newProject = new Project(\n      Math.random().toString(),\n      title,\n      description,\n      manday,\n      ProjectStatus.Active\n    );\n    this.projects.push(newProject);\n    this.updateListeners();\n  }\n\n  moveProject(projectId: string, newStatus: ProjectStatus) {\n    const project = this.projects.find((prj) => prj.id === projectId);\n    if (project && project.status !== newStatus) {\n      project.status = newStatus;\n      this.updateListeners();\n    }\n  }\n\n  private updateListeners() {\n    for (const listenerFn of this.listeners) {\n      listenerFn(this.projects.slice());\n    }\n  }\n}\n\nexport const projectState = ProjectState.getInstance();\n","import { Component } from \"./base-component\";\nimport { Validatable, validate } from \"../util/validation\";\nimport { autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../state/project-state\";\n\n// ProjectInput Class\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n  titleInputElement: HTMLInputElement;\n  descriptionInputElement: HTMLInputElement;\n  mandayInputElement: HTMLInputElement;\n\n  constructor() {\n    super(\"project-input\", \"app\", true, \"user-input\");\n\n    this.titleInputElement = this.element.querySelector(\n      \"#title\"\n    ) as HTMLInputElement;\n    this.descriptionInputElement = this.element.querySelector(\n      \"#description\"\n    ) as HTMLInputElement;\n    this.mandayInputElement = this.element.querySelector(\n      \"#manday\"\n    ) as HTMLInputElement;\n\n    this.configure();\n  }\n\n  configure() {\n    this.element.addEventListener(\"submit\", this.submitHandler);\n  }\n\n  renderContent() {}\n\n  private gatherUserInput(): [string, string, number] | void {\n    const enteredTitle = this.titleInputElement.value;\n    const enteredDescription = this.descriptionInputElement.value;\n    const enteredManday = this.mandayInputElement.value;\n\n    const titleValidatable: Validatable = {\n      value: enteredTitle,\n      required: true,\n    };\n    const descriptionValidatable: Validatable = {\n      value: enteredDescription,\n      required: true,\n      minLength: 5,\n    };\n    const mandayValidatable: Validatable = {\n      value: +enteredManday,\n      required: true,\n      min: 1,\n      max: 1000,\n    };\n    if (\n      !validate(titleValidatable) ||\n      !validate(descriptionValidatable) ||\n      !validate(mandayValidatable)\n    ) {\n      alert(\"入力値が正しくありません。再度お試しください。\");\n      return;\n    } else {\n      return [enteredTitle, enteredDescription, +enteredManday];\n    }\n  }\n\n  private clearInputs() {\n    this.titleInputElement.value = \"\";\n    this.descriptionInputElement.value = \"\";\n    this.mandayInputElement.value = \"\";\n  }\n\n  @autobind\n  private submitHandler(event: Event) {\n    event.preventDefault();\n    const userInput = this.gatherUserInput();\n    if (Array.isArray(userInput)) {\n      const [title, desc, manday] = userInput;\n      projectState.addProject(title, desc, manday);\n      this.clearInputs();\n    }\n  }\n}\n","import { Draggable } from \"../models/drag-drop\";\nimport { Project } from \"../models/project\";\nimport { Component } from \"./base-component\";\nimport { autobind } from \"../decorators/autobind\";\n\n// ProjectItem Class\nexport class ProjectItem\n  extends Component<HTMLUListElement, HTMLLIElement>\n  implements Draggable\n{\n  private project: Project;\n\n  get manday() {\n    if (this.project.manday < 20) {\n      return this.project.manday.toString() + \"人日\";\n    } else {\n      return (this.project.manday / 20).toString() + \"人月\";\n    }\n  }\n\n  constructor(hostId: string, project: Project) {\n    super(\"single-project\", hostId, false, project.id);\n    this.project = project;\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragStartHandler(event: DragEvent) {\n    event.dataTransfer!.setData(\"text/plain\", this.project.id);\n    event.dataTransfer!.effectAllowed = \"move\";\n  }\n\n  dragEndHandler(_: DragEvent) {\n    console.log(\"Drag終了\");\n  }\n\n  configure() {\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\n  }\n\n  renderContent() {\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\n    this.element.querySelector(\"h3\")!.textContent = this.manday;\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\n  }\n}\n","import { DragTarget } from \"../models/drag-drop\";\nimport { Project, ProjectStatus } from \"../models/project\";\nimport { Component } from \"./base-component\";\nimport { autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../state/project-state\";\nimport { ProjectItem } from \"./project-item\";\n\n// ProjectList Class\nexport class ProjectList\n  extends Component<HTMLDivElement, HTMLElement>\n  implements DragTarget\n{\n  assignedProjects: Project[];\n\n  constructor(private type: \"active\" | \"finished\") {\n    super(\"project-list\", \"app\", false, `${type}-projects`);\n    this.assignedProjects = [];\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragOverHandler(event: DragEvent) {\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n      const listEl = this.element.querySelector(\"ul\")!;\n      listEl.classList.add(\"droppable\");\n    }\n  }\n\n  @autobind\n  dropHandler(event: DragEvent) {\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\n    projectState.moveProject(\n      prjId,\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\n    );\n  }\n\n  @autobind\n  dragLeaveHandler(_: DragEvent) {\n    const listEl = this.element.querySelector(\"ul\")!;\n    listEl.classList.remove(\"droppable\");\n  }\n\n  configure() {\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\n    this.element.addEventListener(\"drop\", this.dropHandler);\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\n\n    projectState.addListener((projects: Project[]) => {\n      const relevantProjects = projects.filter((prj) => {\n        if (this.type === \"active\") {\n          return prj.status === ProjectStatus.Active;\n        }\n        return prj.status === ProjectStatus.Finished;\n      });\n      this.assignedProjects = relevantProjects;\n      this.renderProjects();\n    });\n  }\n\n  renderContent() {\n    const listId = `${this.type}-projects-list`;\n    this.element.querySelector(\"ul\")!.id = listId;\n    this.element.querySelector(\"h2\")!.textContent =\n      this.type === \"active\" ? \"実行中プロジェクト\" : \"完了プロジェクト\";\n  }\n\n  private renderProjects() {\n    const listEl = document.getElementById(\n      `${this.type}-projects-list`\n    )! as HTMLUListElement;\n    listEl.innerHTML = \"\";\n    for (const prjItem of this.assignedProjects) {\n      new ProjectItem(listEl.id, prjItem);\n    }\n  }\n}\n","import { ProjectInput } from \"./components/project-input\";\nimport { ProjectList } from \"./components/project-list\";\n\nnew ProjectInput();\nnew ProjectList(\"active\");\nnew ProjectList(\"finished\");\n"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","autobind","_","_2","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","manday","status","ProjectState","listeners","addListener","listenerFn","push","super","projects","static","instance","addProject","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","getInstance","ProjectInput","titleInputElement","querySelector","descriptionInputElement","mandayInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredManday","descriptionValidatable","mandayValidatable","alert","clearInputs","event","preventDefault","userInput","Array","isArray","desc","ProjectItem","hostId","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","listEl","innerHTML","prjItem"],"sourceRoot":""}